// Generated by CoffeeScript 1.6.3
(function() {
  var app, debug, exports, net, utils;

  utils = require('./utils');

  debug = require('debug')('connect-tcp:proto');

  net = require('net');

  exports = module.exports = app = {};

  app.use = app.data_use = function(fn) {
    debug("data_use %s", fn.name || 'anonymous');
    this.data_stack.push({
      handle: fn
    });
    return this;
  };

  app.handle = app.data_handle = function(req, res, out) {
    var data_stack, index, next;
    data_stack = this.data_stack;
    index = 0;
    next = function(err) {
      var arity, e, layer;
      layer = data_stack[index++];
      if (!layer) {
        if (out) {
          return out(err);
        }
        return;
      }
      try {
        arity = layer.handle.length;
        if (err) {
          if (arity === 4) {
            return layer.handle(err, req, res, next);
          } else {
            return next(err);
          }
        } else if (arity < 4) {
          return layer.handle(req, res, next);
        } else {
          return next();
        }
      } catch (_error) {
        e = _error;
        return next(e);
      }
    };
    return next();
  };

  app.sock_use = function(fn) {
    debug("sock_use %s", fn.name || 'anonymous');
    this.sock_stack.push({
      handle: fn
    });
    return this;
  };

  app.sock_handle = function(connection, out) {
    var index, next, sock_stack;
    sock_stack = this.sock_stack;
    index = 0;
    next = function(err) {
      var arity, e, layer;
      layer = sock_stack[index++];
      if (!layer) {
        if (out) {
          return out(err);
        }
        return;
      }
      try {
        arity = layer.handle.length;
        if (err) {
          if (arity === 3) {
            return layer.handle(err, connection, next);
          } else {
            return next(err);
          }
        } else if (arity < 3) {
          return layer.handle(connection, next);
        } else {
          return next();
        }
      } catch (_error) {
        e = _error;
        return next(e);
      }
    };
    return next();
  };

  app.listen = function() {
    var server;
    server = net.createServer(this);
    return server.listen.apply(server, arguments);
  };

}).call(this);
